name: Go Docker Image CI

on:
  push:
    branches: [ master ]

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: golan
      IMAGE_TAG: ${{ github.run_number }}
      DOCKER_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}
      TAG_PREFIX: dev
      ARGOCD_ENDPOINT: argocd.strategy22.com #without https
      INSECURE: true
      APP_NAME: gola

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository..
      contents: write
      
    steps:

    - uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v1.14.1
      with:
        #registry:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        ecr: auto
        logout: true

    - name: Build the Docker image
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        docker build --file Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$TAG_PREFIX-$IMAGE_TAG .
    - name: Docker Push
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        echo "Pushing image to Docker Hub..."
        docker push $DOCKER_REPOSITORY/$IMAGE_NAME:$TAG_PREFIX-$IMAGE_TAG
        echo "::set-output name=image::$DOCKER_REPOSITORY/$IMAGE_NAME:$TAG_PREFIX-$git_hash"
    - name: Get Image Tag
      id: getImageTag
      run: |
        git_hash=$(git rev-parse --short "$GITHUB_SHA")
        echo "::set-output name=imagetag::$TAG_PREFIX-$git_hash"
    - name: Update image tag in manifest
      run: |
         sudo cp deployment/deploy.org  deployment/deploy.yaml  && sudo sed -i -e "s|replace_me|$TAG_PREFIX-$IMAGE_TAG|" deployment/deploy.yaml
    - uses: stefanzweifel/git-auto-commit-action@v4
    - name: ArgoCD Application Sync Action
      uses: omegion/argocd-actions@v0.2.0
      with:
        address: ${{ env.ARGOCD_ENDPOINT }}
        token: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        insecure: ${{ env.INSECURE }}
        appName: ${{ env.APP_NAME }}
        action: sync
        imageTag: ${{steps.getImageTag.outputs.imagetag}}
